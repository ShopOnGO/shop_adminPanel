package dlq

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/segmentio/kafka-go"
)

type Consumer struct {
	reader   *kafka.Reader
	dispatch func([]byte)
}

func NewConsumer(brokers []string, topic, groupID string, dispatch func([]byte)) *Consumer {
	return &Consumer{
		reader: kafka.NewReader(kafka.ReaderConfig{
			Brokers:  brokers,
			Topic:    topic,
			GroupID:  groupID,
			MinBytes: 1,
			MaxBytes: 10e6,
		}),
		dispatch: dispatch,
	}
}

func (c *Consumer) Start(ctx context.Context) {
	defer c.reader.Close()

	log.Println("[DLQ] ‚è≥ –°—Ç–∞—Ä—Ç—É–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∏–∑ Kafka...")

	for {
		m, err := c.reader.ReadMessage(ctx)
		if err != nil {
			// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ –æ—Ç–º–µ–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
			if ctx.Err() != nil {
				log.Println("[DLQ] üõë –ö–æ–Ω—Å—å—é–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
				return
			}
			log.Printf("[DLQ] ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			continue
		}

		log.Printf("[DLQ] üì© –°–æ–æ–±—â–µ–Ω–∏–µ: key=%s, value=%s", string(m.Key), string(m.Value))
		c.dispatch(m.Value)
	}
}

// –í–∞—Ä–∏–∞–Ω—Ç –∑–∞–ø—É—Å–∫–∞ —Å graceful shutdown
func RunWithGracefulShutdown(consumer *Consumer) {
	ctx, cancel := context.WithCancel(context.Background())

	go consumer.Start(ctx)

	// –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	sigCh := make(chan os.Signal, 1)
	signal.Notify(sigCh, syscall.SIGINT, syscall.SIGTERM)
	<-sigCh

	log.Println("[DLQ] üîÑ –ó–∞–≤–µ—Ä—à–∞–µ–º...")
	cancel()
	time.Sleep(2 * time.Second) // –î–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
}
