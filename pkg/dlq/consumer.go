package dlq

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	kafkaService "github.com/ShopOnGO/ShopOnGO/pkg/kafkaService"
	"github.com/segmentio/kafka-go"
)

type Consumer struct {
	kafka *kafkaService.KafkaService
}

func NewConsumer(brokers []string, topic, groupID, clientID string) *Consumer {
	return &Consumer{
		kafka: kafkaService.NewConsumer(brokers, topic, groupID, clientID),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
func (c *Consumer) Start(ctx context.Context, handler func(key, value []byte)) {
	c.kafka.Consume(ctx, func(m kafka.Message) error {
		log.Printf("[DLQ] üì© –°–æ–æ–±—â–µ–Ω–∏–µ: key=%s, value=%s", string(m.Key), string(m.Value))
		handler(m.Key, m.Value)
		return nil
	})
}

// –ó–∞–ø—É—Å–∫ —Å graceful shutdown
func RunWithGracefulShutdown(consumer *Consumer, handler func(key, value []byte)) {
	ctx, cancel := context.WithCancel(context.Background())

	go consumer.Start(ctx, handler)

	sigCh := make(chan os.Signal, 1)
	signal.Notify(sigCh, syscall.SIGINT, syscall.SIGTERM)
	<-sigCh

	log.Println("[DLQ] üîÑ –ó–∞–≤–µ—Ä—à–∞–µ–º...")
	cancel()
	time.Sleep(2 * time.Second)
}
