package dlq

import (
	"admin/configs"
	"context"
	"encoding/json"
	"log"
)

func StartDLQProcessor(conf *configs.Config) {
	retrier := NewKafkaRetrier(
		NewKafkaProducer([]string{conf.Dlq.Broker}),
		conf.Dlq.ProducerTopic,
	)
	log.Printf("[DLQ] ‚öôÔ∏è Broker: %s, Topic: %s", conf.Dlq.Broker, conf.Dlq.ConsumerTopic)

	consumer := NewConsumer(
		[]string{conf.Dlq.Broker},
		conf.Dlq.ConsumerTopic,
		"dlq-processor-group",
		func(msg []byte) {
			var n Notification
			if err := json.Unmarshal(msg, &n); err != nil {
				log.Printf("[DLQ] üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %v", err)
				return
			}

			if ShouldRetry(n) {
				n.WasInDLQ = true
				log.Printf("[DLQ] üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: %s", n.ID)
				if err := retrier.Retry(context.Background(), n); err != nil {
					log.Printf("[DLQ] ‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ç—Ä–∞—è: %v", err)
				}
			} else {
				log.Printf("[DLQ] ‚ùé –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: %s", n.ID)
			}
		},
	)

	RunWithGracefulShutdown(consumer)
}
