// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: brand.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BrandService_CreateBrand_FullMethodName       = "/proto.BrandService/CreateBrand"
	BrandService_GetFeaturedBrands_FullMethodName = "/proto.BrandService/GetFeaturedBrands"
	BrandService_FindBrandByName_FullMethodName   = "/proto.BrandService/FindBrandByName"
	BrandService_FindBrandByID_FullMethodName     = "/proto.BrandService/FindBrandByID"
	BrandService_UpdateBrand_FullMethodName       = "/proto.BrandService/UpdateBrand"
	BrandService_DeleteBrand_FullMethodName       = "/proto.BrandService/DeleteBrand"
)

// BrandServiceClient is the client API for BrandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrandServiceClient interface {
	CreateBrand(ctx context.Context, in *CreateBrandRequest, opts ...grpc.CallOption) (*BrandResponse, error)
	GetFeaturedBrands(ctx context.Context, in *GetFeaturedBrandsRequest, opts ...grpc.CallOption) (*BrandListResponse, error)
	FindBrandByName(ctx context.Context, in *FindBrandByNameRequest, opts ...grpc.CallOption) (*BrandResponse, error)
	FindBrandByID(ctx context.Context, in *FindBrandByIDRequest, opts ...grpc.CallOption) (*BrandResponse, error)
	UpdateBrand(ctx context.Context, in *Brand, opts ...grpc.CallOption) (*BrandResponse, error)
	DeleteBrand(ctx context.Context, in *DeleteBrandRequest, opts ...grpc.CallOption) (*DeleteBrandResponse, error)
}

type brandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrandServiceClient(cc grpc.ClientConnInterface) BrandServiceClient {
	return &brandServiceClient{cc}
}

func (c *brandServiceClient) CreateBrand(ctx context.Context, in *CreateBrandRequest, opts ...grpc.CallOption) (*BrandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrandResponse)
	err := c.cc.Invoke(ctx, BrandService_CreateBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) GetFeaturedBrands(ctx context.Context, in *GetFeaturedBrandsRequest, opts ...grpc.CallOption) (*BrandListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrandListResponse)
	err := c.cc.Invoke(ctx, BrandService_GetFeaturedBrands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) FindBrandByName(ctx context.Context, in *FindBrandByNameRequest, opts ...grpc.CallOption) (*BrandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrandResponse)
	err := c.cc.Invoke(ctx, BrandService_FindBrandByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) FindBrandByID(ctx context.Context, in *FindBrandByIDRequest, opts ...grpc.CallOption) (*BrandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrandResponse)
	err := c.cc.Invoke(ctx, BrandService_FindBrandByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) UpdateBrand(ctx context.Context, in *Brand, opts ...grpc.CallOption) (*BrandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrandResponse)
	err := c.cc.Invoke(ctx, BrandService_UpdateBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) DeleteBrand(ctx context.Context, in *DeleteBrandRequest, opts ...grpc.CallOption) (*DeleteBrandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBrandResponse)
	err := c.cc.Invoke(ctx, BrandService_DeleteBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrandServiceServer is the server API for BrandService service.
// All implementations must embed UnimplementedBrandServiceServer
// for forward compatibility.
type BrandServiceServer interface {
	CreateBrand(context.Context, *CreateBrandRequest) (*BrandResponse, error)
	GetFeaturedBrands(context.Context, *GetFeaturedBrandsRequest) (*BrandListResponse, error)
	FindBrandByName(context.Context, *FindBrandByNameRequest) (*BrandResponse, error)
	FindBrandByID(context.Context, *FindBrandByIDRequest) (*BrandResponse, error)
	UpdateBrand(context.Context, *Brand) (*BrandResponse, error)
	DeleteBrand(context.Context, *DeleteBrandRequest) (*DeleteBrandResponse, error)
	mustEmbedUnimplementedBrandServiceServer()
}

// UnimplementedBrandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBrandServiceServer struct{}

func (UnimplementedBrandServiceServer) CreateBrand(context.Context, *CreateBrandRequest) (*BrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrand not implemented")
}
func (UnimplementedBrandServiceServer) GetFeaturedBrands(context.Context, *GetFeaturedBrandsRequest) (*BrandListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeaturedBrands not implemented")
}
func (UnimplementedBrandServiceServer) FindBrandByName(context.Context, *FindBrandByNameRequest) (*BrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBrandByName not implemented")
}
func (UnimplementedBrandServiceServer) FindBrandByID(context.Context, *FindBrandByIDRequest) (*BrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBrandByID not implemented")
}
func (UnimplementedBrandServiceServer) UpdateBrand(context.Context, *Brand) (*BrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrand not implemented")
}
func (UnimplementedBrandServiceServer) DeleteBrand(context.Context, *DeleteBrandRequest) (*DeleteBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrand not implemented")
}
func (UnimplementedBrandServiceServer) mustEmbedUnimplementedBrandServiceServer() {}
func (UnimplementedBrandServiceServer) testEmbeddedByValue()                      {}

// UnsafeBrandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrandServiceServer will
// result in compilation errors.
type UnsafeBrandServiceServer interface {
	mustEmbedUnimplementedBrandServiceServer()
}

func RegisterBrandServiceServer(s grpc.ServiceRegistrar, srv BrandServiceServer) {
	// If the following call pancis, it indicates UnimplementedBrandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BrandService_ServiceDesc, srv)
}

func _BrandService_CreateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).CreateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandService_CreateBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).CreateBrand(ctx, req.(*CreateBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_GetFeaturedBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeaturedBrandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).GetFeaturedBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandService_GetFeaturedBrands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).GetFeaturedBrands(ctx, req.(*GetFeaturedBrandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_FindBrandByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindBrandByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).FindBrandByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandService_FindBrandByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).FindBrandByName(ctx, req.(*FindBrandByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_FindBrandByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindBrandByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).FindBrandByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandService_FindBrandByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).FindBrandByID(ctx, req.(*FindBrandByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Brand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandService_UpdateBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).UpdateBrand(ctx, req.(*Brand))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_DeleteBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).DeleteBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandService_DeleteBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).DeleteBrand(ctx, req.(*DeleteBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BrandService_ServiceDesc is the grpc.ServiceDesc for BrandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BrandService",
	HandlerType: (*BrandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBrand",
			Handler:    _BrandService_CreateBrand_Handler,
		},
		{
			MethodName: "GetFeaturedBrands",
			Handler:    _BrandService_GetFeaturedBrands_Handler,
		},
		{
			MethodName: "FindBrandByName",
			Handler:    _BrandService_FindBrandByName_Handler,
		},
		{
			MethodName: "FindBrandByID",
			Handler:    _BrandService_FindBrandByID_Handler,
		},
		{
			MethodName: "UpdateBrand",
			Handler:    _BrandService_UpdateBrand_Handler,
		},
		{
			MethodName: "DeleteBrand",
			Handler:    _BrandService_DeleteBrand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brand.proto",
}
