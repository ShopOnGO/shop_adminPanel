// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: link.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LinkService_Create_FullMethodName        = "/proto.LinkService/Create"
	LinkService_Update_FullMethodName        = "/proto.LinkService/Update"
	LinkService_Delete_FullMethodName        = "/proto.LinkService/Delete"
	LinkService_GetLinkByHash_FullMethodName = "/proto.LinkService/GetLinkByHash"
	LinkService_GetByID_FullMethodName       = "/proto.LinkService/GetByID"
	LinkService_GetAllLinks_FullMethodName   = "/proto.LinkService/GetAllLinks"
	LinkService_CountLinks_FullMethodName    = "/proto.LinkService/CountLinks"
)

// LinkServiceClient is the client API for LinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkServiceClient interface {
	Create(ctx context.Context, in *CreateLinkRequest, opts ...grpc.CallOption) (*CreateLinkResponse, error)
	Update(ctx context.Context, in *UpdateLinkRequest, opts ...grpc.CallOption) (*UpdateLinkResponse, error)
	Delete(ctx context.Context, in *DeleteLinkRequest, opts ...grpc.CallOption) (*DeleteLinkResponse, error)
	GetLinkByHash(ctx context.Context, in *GetLinkByHashRequest, opts ...grpc.CallOption) (*GetLinkByHashResponse, error)
	GetByID(ctx context.Context, in *GetLinkByIDRequest, opts ...grpc.CallOption) (*GetLinkByIDResponse, error)
	GetAllLinks(ctx context.Context, in *GetAllLinksRequest, opts ...grpc.CallOption) (*GetAllLinksResponse, error)
	CountLinks(ctx context.Context, in *CountLinksRequest, opts ...grpc.CallOption) (*CountLinksResponse, error)
}

type linkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkServiceClient(cc grpc.ClientConnInterface) LinkServiceClient {
	return &linkServiceClient{cc}
}

func (c *linkServiceClient) Create(ctx context.Context, in *CreateLinkRequest, opts ...grpc.CallOption) (*CreateLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLinkResponse)
	err := c.cc.Invoke(ctx, LinkService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkServiceClient) Update(ctx context.Context, in *UpdateLinkRequest, opts ...grpc.CallOption) (*UpdateLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLinkResponse)
	err := c.cc.Invoke(ctx, LinkService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkServiceClient) Delete(ctx context.Context, in *DeleteLinkRequest, opts ...grpc.CallOption) (*DeleteLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLinkResponse)
	err := c.cc.Invoke(ctx, LinkService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkServiceClient) GetLinkByHash(ctx context.Context, in *GetLinkByHashRequest, opts ...grpc.CallOption) (*GetLinkByHashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLinkByHashResponse)
	err := c.cc.Invoke(ctx, LinkService_GetLinkByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkServiceClient) GetByID(ctx context.Context, in *GetLinkByIDRequest, opts ...grpc.CallOption) (*GetLinkByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLinkByIDResponse)
	err := c.cc.Invoke(ctx, LinkService_GetByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkServiceClient) GetAllLinks(ctx context.Context, in *GetAllLinksRequest, opts ...grpc.CallOption) (*GetAllLinksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllLinksResponse)
	err := c.cc.Invoke(ctx, LinkService_GetAllLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkServiceClient) CountLinks(ctx context.Context, in *CountLinksRequest, opts ...grpc.CallOption) (*CountLinksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountLinksResponse)
	err := c.cc.Invoke(ctx, LinkService_CountLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkServiceServer is the server API for LinkService service.
// All implementations must embed UnimplementedLinkServiceServer
// for forward compatibility.
type LinkServiceServer interface {
	Create(context.Context, *CreateLinkRequest) (*CreateLinkResponse, error)
	Update(context.Context, *UpdateLinkRequest) (*UpdateLinkResponse, error)
	Delete(context.Context, *DeleteLinkRequest) (*DeleteLinkResponse, error)
	GetLinkByHash(context.Context, *GetLinkByHashRequest) (*GetLinkByHashResponse, error)
	GetByID(context.Context, *GetLinkByIDRequest) (*GetLinkByIDResponse, error)
	GetAllLinks(context.Context, *GetAllLinksRequest) (*GetAllLinksResponse, error)
	CountLinks(context.Context, *CountLinksRequest) (*CountLinksResponse, error)
	mustEmbedUnimplementedLinkServiceServer()
}

// UnimplementedLinkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLinkServiceServer struct{}

func (UnimplementedLinkServiceServer) Create(context.Context, *CreateLinkRequest) (*CreateLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLinkServiceServer) Update(context.Context, *UpdateLinkRequest) (*UpdateLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedLinkServiceServer) Delete(context.Context, *DeleteLinkRequest) (*DeleteLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedLinkServiceServer) GetLinkByHash(context.Context, *GetLinkByHashRequest) (*GetLinkByHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkByHash not implemented")
}
func (UnimplementedLinkServiceServer) GetByID(context.Context, *GetLinkByIDRequest) (*GetLinkByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedLinkServiceServer) GetAllLinks(context.Context, *GetAllLinksRequest) (*GetAllLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLinks not implemented")
}
func (UnimplementedLinkServiceServer) CountLinks(context.Context, *CountLinksRequest) (*CountLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountLinks not implemented")
}
func (UnimplementedLinkServiceServer) mustEmbedUnimplementedLinkServiceServer() {}
func (UnimplementedLinkServiceServer) testEmbeddedByValue()                     {}

// UnsafeLinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkServiceServer will
// result in compilation errors.
type UnsafeLinkServiceServer interface {
	mustEmbedUnimplementedLinkServiceServer()
}

func RegisterLinkServiceServer(s grpc.ServiceRegistrar, srv LinkServiceServer) {
	// If the following call pancis, it indicates UnimplementedLinkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LinkService_ServiceDesc, srv)
}

func _LinkService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkServiceServer).Create(ctx, req.(*CreateLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkServiceServer).Update(ctx, req.(*UpdateLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkServiceServer).Delete(ctx, req.(*DeleteLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkService_GetLinkByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkServiceServer).GetLinkByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkService_GetLinkByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkServiceServer).GetLinkByHash(ctx, req.(*GetLinkByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkServiceServer).GetByID(ctx, req.(*GetLinkByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkService_GetAllLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkServiceServer).GetAllLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkService_GetAllLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkServiceServer).GetAllLinks(ctx, req.(*GetAllLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkService_CountLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkServiceServer).CountLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkService_CountLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkServiceServer).CountLinks(ctx, req.(*CountLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkService_ServiceDesc is the grpc.ServiceDesc for LinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LinkService",
	HandlerType: (*LinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _LinkService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LinkService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _LinkService_Delete_Handler,
		},
		{
			MethodName: "GetLinkByHash",
			Handler:    _LinkService_GetLinkByHash_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _LinkService_GetByID_Handler,
		},
		{
			MethodName: "GetAllLinks",
			Handler:    _LinkService_GetAllLinks_Handler,
		},
		{
			MethodName: "CountLinks",
			Handler:    _LinkService_CountLinks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "link.proto",
}
